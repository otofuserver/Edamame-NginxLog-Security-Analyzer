name: Java Build & Test

on:
  push:
    paths:
      - '**.java'
      - 'build.gradle'
      - 'gradle/**'
      - 'src/**'
    tags:
      - 'v*'  # vで始まるタグがプッシュされた時
  pull_request:
    paths:
      - '**.java'
      - 'build.gradle'
      - 'gradle/**'
      - 'src/**'

# GitHubリリース作成のための権限設定
permissions:
  contents: write
  discussions: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Java 21環境セットアップ
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradleキャッシュ設定
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradleラッパーに実行権限を付与
        run: chmod +x gradlew

      - name: Gradleビルド実行
        run: ./gradlew build

      - name: Javaコンパイルチェック
        run: ./gradlew compileJava

      - name: テスト実行
        run: ./gradlew test

      - name: JARファイル生成とcontainerフォルダへコピーその後Dockerイメージビルドテスト
        run: |
          chmod +x gradlew
          ./gradlew build
          echo "生成されたJARファイルをcontainerフォルダにコピー:"
          cp build/libs/NginxLogToMysql-*.jar container/NginxLogToMysql.jar
          cp build/libs/SetupSecureConfig-*.jar container/SetupSecureConfig.jar
          echo "✅ JARファイルのコピーが完了しました"
          cd container
          echo "containerフォルダの内容確認:"
          ls -la
          echo "Dockerイメージのビルドテスト:"
          docker build -f Dockerfile -t edamame-nginx-analyzer:test .

      - name: Dockerコンテナ起動テスト
        run: |
          echo "Dockerコンテナの起動テスト:"
          # DB接続情報がないため即座に終了するが、コンテナ起動まで確認
          timeout 30s docker run --rm edamame-nginx-analyzer:test || echo "期待通り終了しました"

  # タグプッシュ時のリリース作成ジョブ
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-and-test
    permissions:
      contents: write
      discussions: write

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得

      - name: Java 21環境セットアップ
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradleキャッシュ設定
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: JARファイル生成とcontainerフォルダ準備
        run: |
          chmod +x gradlew
          ./gradlew build
          echo "生成されたJARファイルをcontainerフォルダにコピー:"
          cp build/libs/NginxLogToMysql-*.jar container/NginxLogToMysql.jar
          cp build/libs/SetupSecureConfig-*.jar container/SetupSecureConfig.jar
          echo "✅ JARファイルのコピーが完了しました"
          echo "containerフォルダの内容確認:"
          ls -la container/

      - name: リリース用zipファイル作成
        run: |
          # タグ名からバージョン番号を抽出（v1.0.0 → 1.0.0）
          VERSION=${GITHUB_REF_NAME#v}
          echo "リリースバージョン: $VERSION"
          
          # リリース用ディレクトリを作成
          mkdir -p release/edamame-nginx-analyzer-$VERSION
          
          # containerフォルダの内容をすべてコピー
          cp -r container/* release/edamame-nginx-analyzer-$VERSION/
          
          # README.mdとライセンスファイルも含める
          cp README.md release/edamame-nginx-analyzer-$VERSION/
          cp LICENSE release/edamame-nginx-analyzer-$VERSION/ 2>/dev/null || echo "LICENSE file not found, skipping"
          cp CHANGELOG.md release/edamame-nginx-analyzer-$VERSION/ 2>/dev/null || echo "CHANGELOG.md file not found, skipping"
          
          # リリース用zipファイルを作成
          cd release
          zip -r edamame-nginx-analyzer-$VERSION.zip edamame-nginx-analyzer-$VERSION/
          
          echo "✅ リリースパッケージ作成完了: edamame-nginx-analyzer-$VERSION.zip"
          ls -la *.zip
          
          # 環境変数として設定
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE_FILE=edamame-nginx-analyzer-$VERSION.zip" >> $GITHUB_ENV

      - name: リリースノート生成
        id: release_notes
        run: |
          VERSION=${{ env.VERSION }}
          
          # CHANGELOGからリリースノートを抽出
          if [ -f CHANGELOG.md ]; then
            # 最新バージョンの変更内容を抽出
            RELEASE_NOTES=$(awk '/^## \['"$VERSION"'\]/ {flag=1; next} /^## \[/ && flag {exit} flag' CHANGELOG.md)
            if [ -z "$RELEASE_NOTES" ]; then
              RELEASE_NOTES="Version $VERSION のリリースです。詳細な変更内容はCHANGELOG.mdをご確認ください。"
            fi
          else
            RELEASE_NOTES="Version $VERSION のリリースです。"
          fi
          
          # マルチライン文字列をファイルに保存
          cat > release_notes.md << 'EOF'
          # Edamame NginxLog Security Analyzer ${{ env.VERSION }}
          
          ${{ env.VERSION }}版のリリースです。
          
          ## 📦 パッケージ内容
          - **NginxLogToMysql.jar**: メインアプリケーション
          - **SetupSecureConfig.jar**: セキュア設定ファイル作成ツール
          - **Dockerfile**: Docker環境用設定
          - **docker-compose.yml**: Docker Compose設定
          - **config/**: 設定ファイル（attack_patterns.json, servers.conf）
          - **setup_secure_config.sh/.bat**: セットアップスクリプト
          
          ## 🚀 使用方法
          1. zipファイルをダウンロードして展開
          2. `setup_secure_config.sh`（Linux）または `setup_secure_config.bat`（Windows）を実行
          3. `docker-compose up -d`でアプリケーション起動
          
          ## 📋 システム要件
          - Java 21+
          - MySQL 8.x
          - Docker & Docker Compose（コンテナ使用時）
          
          ## 📝 変更履歴
          EOF
          
          # CHANGELOG.mdの内容を追加
          if [ -f CHANGELOG.md ]; then
            awk '/^## \['"$VERSION"'\]/ {flag=1; next} /^## \[/ && flag {exit} flag' CHANGELOG.md >> release_notes.md
          fi

      - name: GitHubリリース作成（新API使用）
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Edamame NginxLog Security Analyzer ${{ env.VERSION }}
          body_path: release_notes.md
          files: release/${{ env.RELEASE_FILE }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: リリース完了通知
        run: |
          echo "🎉 リリース完了: Edamame NginxLog Security Analyzer ${{ env.VERSION }}"
          echo "📦 リリースURL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "💾 ダウンロードファイル: ${{ env.RELEASE_FILE }}"
