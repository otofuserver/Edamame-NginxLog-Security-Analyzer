name: Java Build & Test

on:
  push:
    paths:
      - '**.java'
      - 'build.gradle'
      - 'gradle/**'
      - 'src/**'
  pull_request:
    paths:
      - '**.java'
      - 'build.gradle'
      - 'gradle/**'
      - 'src/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Java 21環境セットアップ
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradleキャッシュ設定
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradleラッパーに実行権限を付与
        run: chmod +x gradlew

      - name: Gradleビルド実行
        run: ./gradlew build

      - name: Javaコンパイルチェック
        run: ./gradlew compileJava

      - name: テスト実行
        run: ./gradlew test

      - name: JARファイルをcontainerフォルダに配置
        run: |
          # containerフォルダが存在しない場合は作成
          mkdir -p container
          
          # ビルド成果物の確認
          echo "=== ビルド成果物確認 ==="
          find build/libs -name "*.jar" -type f
          
          # バージョン番号を除いたファイル名でコピー
          echo "=== JARファイルコピー開始 ==="
          cp build/libs/NginxLogToMysql-*.jar container/NginxLogToMysql.jar
          cp build/libs/SetupSecureConfig-*.jar container/SetupSecureConfig.jar
          
          # コピー結果の確認
          echo "=== コピー結果確認 ==="
          ls -la container/
          
          # JARファイルの詳細情報表示
          echo "=== JARファイル詳細情報 ==="
          file container/*.jar
          du -h container/*.jar
          
          echo "✅ JARファイルのcontainerフォルダ配置が完了しました"

      - name: ビルド成果物をアップロード
        uses: actions/upload-artifact@v4
        with:
          name: jar-files
          path: |
            container/NginxLogToMysql.jar
            container/SetupSecureConfig.jar
          retention-days: 30

      - name: ビルド結果の概要表示
        run: |
          echo "=== ビルド結果 ==="
          echo "✅ Java 21コンパイル: 成功"
          echo "✅ Gradleビルド: 成功" 
          echo "✅ テスト実行: 成功"
          echo "✅ JAR配置: 成功"
          echo ""
          echo "生成されたJARファイル:"
          find container -name "*.jar" -exec echo "  - {}" \;

  docker-build-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Java 21環境セットアップ
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradleキャッシュ復元
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: JARファイル生成とcontainerフォルダへコピーその後Dockerイメージビルドテスト
        run: |
          chmod +x gradlew
          ./gradlew build
          echo "生成されたJARファイルをcontainerフォルダにコピー:"
          cp build/libs/NginxLogToMysql-*.jar container/NginxLogToMysql.jar
          cp build/libs/SetupSecureConfig-*.jar container/SetupSecureConfig.jar
          echo "✅ JARファイルのコピーが完了しました"
          cd container
          echo "containerフォルダの内容確認:"
          ls -la *.jar
          echo "Dockerイメージのビルドテスト:"
          docker build -f container/Dockerfile -t edamame-nginx-analyzer:test .

      - name: Dockerコンテナ起動テスト
        run: |
          echo "Dockerコンテナの起動テスト:"
          # DB接続情報がないため即座に終了するが、コンテナ起動まで確認
          timeout 30s docker run --rm edamame-nginx-analyzer:test || echo "期待通り終了しました"
