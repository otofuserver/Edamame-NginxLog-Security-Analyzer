# Edamame NginxLog Security Analyzer

## specification.txt バージョン情報
- **specification.txt version**: v1.0.3
- ※このファイルを更新した場合は、必ず上記バージョン情報も更新すること

## 基本情報
- **アプリ名**: Edamame NginxLog Security Analyzer
- **バージョン**: v1.0.0
- **開発者**: Code Copilot
- **動作環境**:
  - Python 3.11 (Docker環境: python:3.11-slim)
  - MySQL 8.x
  - Linux (Debian/Ubuntuベース)
  - Systemd または Docker コンテナで常駐稼働

---

## 主な機能
### 🔍 1. NGINXログを監視し、MySQLに記録
- `/var/log/nginx/nginx.log` を tail 監視
- `GET/POST/PUT/DELETE` などのアクセスログを抽出し、MySQLに記録
- ログフォーマット例：
  192.168.10.11 - - [21/Jun/2025:23:33:33 +0900] "GET /epgstation/..." 200
- `access_log` テーブルに下記情報を保存:
  - `method`, `full_url`, `status_code`, `ip_address`, `access_time`, `blocked_by_modsec`

### 🛡 2. ModSecurityブロックログの抽出
- ログ内に `ModSecurity: Access denied` を検知
- 該当リクエストが `access_log` に保存された後、その `id` を使って `modsec_alerts` に詳細を記録
- 正規表現で複数ルール (`id`, `msg`, `data`, `severity`) を抽出

### 📦 3. 未登録のURLは `url_registry` に自動登録
- 初回アクセス時に `url_registry` へ追加
- `/run/secrets/attack_patterns.json` を使って `attack_type`（例: SQLi, XSS, LFI等）を識別
- ホワイトリストモード有効かつ指定IPからのアクセスなら `is_whitelisted = TRUE` に

### 🧠 4. `attack_patterns.json` に基づく攻撃タイプ識別
- 起動時に `url_registry` を再スキャンし、`attack_type` を最新に更新
- パターンは `/run/secrets/attack_patterns.json` にJSON形式で定義
- **備考:** `attack_patterns.json` には `"version"` キーが含まれるが、これはシグネチャ判定対象外
- **バージョン管理:** attack_patterns.jsonのバージョンはsettingsテーブルの`attack_patterns_version`カラムに格納される
- **注意:** バックエンドは外部ネットワークへのバージョン確認は行わない。バージョン確認や更新通知はフロントエンド側で実施すること

---

## データベース構造（MySQL）

### `access_log`
| カラム名         | 型              | 説明                       |
|------------------|------------------|----------------------------|
| id               | INT              | 主キー、自動採番         |
| method           | VARCHAR(10)      | HTTPメソッド              |
| full_url         | TEXT             | アクセスURL（クエリ含む） |
| status_code      | INT              | HTTPステータスコード      |
| ip_address       | VARCHAR(45)      | クライアントIP            |
| access_time      | DATETIME         | アクセス日時（ログから抽出）|
| blocked_by_modsec| BOOLEAN          | ModSecurityブロック有無    |

### `url_registry`
| カラム名         | 型              | 説明                                 |
|------------------|------------------|--------------------------------------|
| id               | INT              | 主キー、自動採番                   |
| method           | VARCHAR(10)      | HTTPメソッド                        |
| full_url         | TEXT             | アクセスURL                         |
| created_at       | DATETIME         | 登録日時（ログから抽出）            |
| updated_at       | DATETIME         | 最終更新日時（ログから抽出）        |
| is_whitelisted   | BOOLEAN          | ホワイトリスト対象か               |
| description      | TEXT             | クライアントによる説明入力欄       |
| attack_type      | VARCHAR(255)     | 識別された攻撃タイプ（複数可）     |

### `modsec_alerts`
| カラム名         | 型              | 説明                                  |
|------------------|------------------|---------------------------------------|
| id               | INT              | 主キー、���動採番                    |
| access_log_id    | INT              | `access_log.id` への外部キー         |
| rule_id          | VARCHAR(20)      | ModSecurityルールID                  |
| msg              | TEXT             | アラートメッセージ                   |
| data             | TEXT             | 詳細情報                             |
| severity         | VARCHAR(10)      | 深刻度                               |

### `settings`
| カラム名              | 型              | 説明                           |
|------------------------|------------------|----------------------------------|
| id                     | INT              | 固定値: 1（単一レコード管理）   |
| whitelist_mode         | BOOLEAN          | ホワイトリスト有効フラグ       |
| whitelist_ip           | VARCHAR(45)      | 登録用のIPアドレス       |
| backend_version        | VARCHAR(50)      | バックエンドバージョン情報     |
| frontend_version       | VARCHAR(50)      | フロントエンドバージョン情報   |
| frontend_last_login    | DATETIME         | フロントログイン日時           |
| frontend_last_ip       | VARCHAR(45)      | フロントログイン元IP           |
| attack_patterns_version| VARCHAR(50)      | attack_patterns.jsonのバージョン|

### `users`（フロントエンド認証用）
| カラム名         | 型              | 説明                           |
|------------------|------------------|--------------------------------|
| id               | INT              | 主キー、自動採番               |
| username         | VARCHAR(64)      | ユーザー名（ユニーク）         |
| password_hash    | VARCHAR(255)     | パスワード（ハッシュ化）       |
| email            | VARCHAR(255)     | メールアドレス（ユニーク）     |
| is_active        | BOOLEAN          | 有効フラグ                     |
| created_at       | DATETIME         | 作成日時                       |
| updated_at       | DATETIME         | 最終更新日時                   |
| last_login_at    | DATETIME         | 最終ログイン日時               |

#### 🆕 初期ユーザー自動追加仕様
- usersテーブル新規作成時、初期ユーザー（admin/admin123, admin@example.com, is_active=True）を自動追加する。
- パスワードはbcryptでハッシュ化して保存される。
- 本番運用時は初期パスワードを必ず変更すること。

### `login_history`（ログイン履歴）
| カラム名         | 型              | 説明                           |
|------------------|------------------|--------------------------------|
| id               | INT              | 主キー、自動採番               |
| user_id          | INT              | users.id への外部キー           |
| login_ip         | VARCHAR(45)      | ログイン元IP                   |
| login_time       | DATETIME         | ログイン日時                   |
| success          | BOOLEAN          | 成功/失敗フラグ                |
| user_agent       | TEXT             | ユーザーエージェント           |

---

## セキュア設定ファイル（暗号化）

- `setup_secure_config.py` を使用して暗号鍵と接続情報を生成・暗号化
- 生成ファイル：
  - `secret.key`（Fernet���）
  - `db_config.enc`（暗号化されたJSON）
- デフォルトの読み取り先： `/run/secrets/`
- **仕様詳細:**
  - `setup_secure_config.py`は対話式ウィザード形式で動作し、MySQL接続情報（ホスト名・ユーザー名・パスワード・DB名）を環���変数またはユーザー入力から取得する。
  - 入力された情報はJSON形式で暗号化され、`db_config.enc`として保存される。
  - 暗号鍵は`secret.key`として保存される。両ファイルともパーミ���ションは600で作成される。
  - 暗号化・復号にはPython cryptographyパッケージのFernetを使用する。

---

## ログ出力仕様

- ログ出力は`log`関数を通じて行う。
- フォーマットは `[YYYY-MM-DD HH:MM:SS][LEVEL] メッセージ` となる。
- LEVELは "INFO", "WARN", "ERROR", "DB ERROR", "RECOVERED" など用途に応じて付与される。
- ログは標準出力（コンソール）に出力される。

---

## エラー処理・リトライ仕様（DB接続）

- DB接続は`db_connect`関数で行い、最大5回（MAX_RETRIES=5）までリトライする。
- 各リトライ間は3秒（RETRY_DELAY=3）待機する。
- すべてのリトライが失敗した場合はエラーログを出力し、`sys.exit(1)`でプロセスを終了する。
- DB接続失敗時やSQLエラー時は、エラーメッセージをログ出力する。
- DB初期化やテーブル作成時も例外発生時はエラーログを出力し、必要に応じてFalseを返す。

---

## フロントエンド開発者向け情報

### 🔗 API設計方針（想定）
アプリはまだHTTP APIサーバではないが、将来以下の構成を想定：
- `/api/url_registry` GET： 登録された全URL一覧取得（未記入description用）
- `/api/url_registry/:id` PATCH： `description`, `is_whitelisted` の更新
- `/api/access_log` GET： 全アクセス履歴（フィルタ: IP/期間/ブロック有無）
- `/api/modsec_alerts` GET： ブロック詳細一覧
- `/api/settings` GET/PATCH： 全体設定取得・更新

### 🧑‍💻 UI用DB参照ポイント
- **ホワイトリストURL管理**: `url_registry` (`is_whitelisted`, `description`)
- **ModSecurityログ可視化**: `modsec_alerts`, `access_log`
- **ダッシュボード表示**: 日時別件数集計, `attack_type` 分布など

### 📊 推奨グラフビュー
- 時間帯別アクセスグラフ（line chart）
- ModSecurityブロック比率（pie chart）
- 攻撃タイプ別ヒートマップ（heatmap）

---

## 起動・使用方法（Docker）
```bash
docker compose up -d --build
```

コンテナログ確認：
```bash
docker logs -f nginxlog-LO
```

設定ファイル作成：
```bash
python3 setup_secure_config.py
```

---

## 今後の拡張案（予定）
- APIサーバ化（FastAPIなど）
- フロントエンド：React/Next.jsベース管理画面
- 設定のWeb UI化
- CSVエクスポート、Slack通知、GeoIP連携

---

## コーディング・Lint方針

- Pythonの正規表現で [^\]]+ のような \] エスケープは必要です。
  Linter（pycodestyle等）のW605警告は # noqa: W605 で除外してください。
- `MODSEC_RULE_PATTERN` のような [.*?] 形式の正規表現でも、linterのW605警告は # noqa: W605 で除外してください。
- テストやCIでもこの警告は無視して問題ありません。
- ワークフロー（python-test.yml）でもpycodestyle実行時に `--ignore=W605` を指定し、W605警告を除外しています。
- **specification.txtを更新した場合は、必ず冒頭のバージョン情報も更新すること。**
