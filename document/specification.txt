# Edamame NginxLog Security Analyzer

## specification.txt バージョン情報
- **specification.txt version**: v1.0.44
- ※このファイルを更新した場合は、必ず上記バージョン情報も更新すること
- ※変更履歴は CHANGELOG.md に記録されます

## 基本情報
- **アプリ名**: Edamame NginxLog Security Analyzer
- **バージョン**: v1.0.1
- **開発者**: Code Copilot
- **動作環境**:
  - Java 21+ (Docker環境: openjdk:21-jdk-slim)
  - MySQL 8.x
  - Linux (Debian/Ubuntuベース)
  - Systemd または Docker コンテナで常駐稼働

## アーキテクチャ変更履歴
### v1.0.37 - 複数サーバー監視への完全移行
- **単一サーバーモード（フォールバック）の完全廃止**
- **複数サーバー監視のみに統一**：servers.confファイルによる設定管理
- **サーバー設定ファイル更新検知の誤報修正**：静的変数による正確な更新時刻管理
- **削除されたメソッド**：
  - monitorLogFile() (単一サーバー監視用)
  - processLogLine() (従来のログ処理)
- **コードクリーンアップ**：未使用インポートの削除、「フォールバック」表現の統一

### v1.0.33 - Java版への完全移行
- **Python版からJava版への移行完了**
- **ビルドシステム**: Maven → Gradle
- **削除された旧構成ファイル**:
  - nginx_log_to_mysql.py (Python版メインアプリケーション)
  - setup_secure_config.py (Python版セットアップツール)
  - modules/ (Python版モジュール群)
  - pom.xml (Maven設定ファイル)
  - target/ (Mavenビルドディレクトリ)
  - .venv/ (Python仮想環境)

## 現在のプロジェクト構成
### Java版ソースコード
- **メインアプリケーション**: src/main/java/com/edamame/security/NginxLogToMysql.java
- **セットアップツール**: src/main/java/com/edamame/tools/SetupSecureConfig.java
- **ビルド設定**: build.gradle
- **ビルド成果物**: build/libs/

### Docker構成
- **container/Dockerfile**: Java 21ベース、修正済み（正しいパス指定）
- **container/docker-compose.yml**: Docker Compose設定
- **container/setup_secure_config.bat**: Windows用セットアップスクリプト
- **container/setup_secure_config.sh**: Linux用セットアップスクリプト
- **container/attack_patterns.json**: 攻撃パターン定義ファイル

---

## 主な機能
### 🔍 1. NGINXログを監視し、MySQLに記録
- `/var/log/nginx/nginx.log` を tail 監視
- `GET/POST/PUT/DELETE` などのアクセスログを抽出し、MySQLに記録
- ログフォーマット例：
  192.168.10.11 - - [21/Jun/2025:23:33:33 +0900] "GET /epgstation/..." 200
- `access_log` テーブルに下記情報を保存:
  - `method`, `full_url`, `status_code`, `ip_address`, `access_time`, `blocked_by_modsec`

### 🛡 2. ModSecurityブロックログの抽出
- ログ内に `ModSecurity: Access denied` を検知
- 該当リクエストが `access_log` に保存された後、その `id` を使って `modsec_alerts` に詳細を記録
- 正規表現で複数ルール (`id`, `msg`, `data`, `severity`) を抽出

### 📦 3. 未登録のURLは `url_registry` に自動登録
- 初回アクセス時に `url_registry` へ追加
- `/run/secrets/attack_patterns.json` を使って `attack_type`（例: SQLi, XSS, LFI等）を識別
- ホワイトリストモード有効かつ指定IPからのアクセスなら `is_whitelisted = TRUE` に

### 🧠 4. `attack_patterns.yaml` に基づく攻撃タイプ識別・自動更新
- 起動時に `url_registry` を再スキャンし、`attack_type` を最新に更新
- パターンは `/run/secrets/attack_patterns.yaml` にYAML形式で定義
- **備考:** `attack_patterns.yaml` には `version` キーが含まれるが、これはシグネチャ判定対象外
- **自動更新機能:** 1時間ごとにGitHubリポジトリから最新バージョンを自動チェック・更新
- **バックアップ機能:** 更新前に自動でローカルファイルをバックアップ
- **主な攻撃タイプ例:** SQLi, XSS, LFI, RFI, CommandInjection, SSRF, XXE, CSRF, OpenRedirect など

---


## セキュア設定ファイル（暗号化）

- `SetupSecureConfig.java` を使用して暗号鍵と接続情報を生成・暗号化
- 生成ファイル：
  - `secret.key`（AES-GCM暗号鍵）
  - `db_config.enc`（暗号化されたJSON）
- デフォルトの読み取り先： `/run/secrets/`
- **仕様詳細:**
  - `SetupSecureConfig.java`は対話式ウィザード形式で動作し、MySQL接続情報（ホスト名・ユーザー名・パスワード・DB名）を環境変数またはユーザー入力から取得する。
  - 入力された情報はJSON形式で暗号化され、`db_config.enc`として保存される。
  - 暗号鍵は`secret.key`として保存される。両ファイルともパーミッションは600で作成される。
  - 暗号化・復号にはBouncyCastleライブラリのAES-GCMを使用する。
  - 実行方法：
    - Windows: `setup_secure_config.bat`
    - Linux/Unix: `./setup_secure_config.sh`
    - 直接実行: `java -jar SetupSecureConfig-V1.0.jar`

---

## ログ出力仕様

- ログ出力は`log`関数を通じて行う。
- フォーマットは `[YYYY-MM-DD HH:MM:SS][LEVEL] メッセージ` となる。
- LEVELは "INFO", "WARN", "ERROR", "DB ERROR", "RECOVERED" など用途に応じて付与される。
- ログは標準出力（コンソール）に出力される。

---

## エラー処理・リトライ仕様（DB接続）

- DB接続は`db_connect`関数で行い、最大5回（MAX_RETRIES=5）までリトライする。
- 各リトライ間は3秒（RETRY_DELAY=3）待機する。
- すべてのリトライが失敗した場合はエラーログを出力し、`sys.exit(1)`でプロセスを終了する。
- DB接続失敗時やSQLエラー時は、エラーメッセージをログ出力する。
- DB初期化やテーブル作成時も例外発生時はエラーログを出力し、必要に応じてFalseを返す。

---

## フロントエンド開発者向け情報

### 🔗 API設計方針（想定）
アプリはまだHTTP APIサーバではないが、将来以下の構成を想定：
- `/api/url_registry` GET： 登録された全URL一覧取得（未記入description用）
- `/api/url_registry/:id` PATCH： `description`, `is_whitelisted` の更新
- `/api/access_log` GET： ��アクセス履歴（フィルタ: IP/期間/ブロック有無）
- `/api/modsec_alerts` GET： ブロック詳細一覧
- `/api/settings` GET/PATCH： 全体設定取得・更新

### 🧑‍💻 UI用DB参照ポイント
- **ホワイトリストURL管理**: `url_registry` (`is_whitelisted`, `description`)
- **ModSecurityログ可視化**: `modsec_alerts`, `access_log`
- **ダッシュボード表示**: 日時別件数集計, `attack_type` 分布など

### 📊 推奨グラフビュー
- 時間帯別アクセスグラフ（line chart）
- ModSecurityブロック比率（pie chart）
- 攻撃タイプ別ヒートマップ（heatmap）

---

## 起動・使用方法（Docker）
```bash
docker compose up -d --build
```

コンテナログ確認：
```bash
docker logs -f nginxlog-LO
```

設定ファイル作成（Java版）：
```bash
# Windows
setup_secure_config.bat

# Linux/Unix
./setup_secure_config.sh

# 直接実行
java -jar build/libs/SetupSecureConfig-V1.0.jar
```

ビルド方法：
```bash
# Gradleビルド
./gradlew build

# JAR生成確認
ls build/libs/
```

---

## 今後の拡張案（予定）
- APIサーバ化（Spring Boot REST API等）
- フロントエンド：React/Next.jsベース管理画面
- 設定のWeb UI化
- CSVエクスポート、Slack通知、GeoIP連携
- マイクロサービス化（Kubernetes対応）

---

## コーディング・Lint方針

- Java 21の最新機能を活用すること
- Javaコーディング規約に従うこと：
  - クラス名：PascalCase（例：NginxLogToMysql）
  - メソッド・変数名：camelCase（例：processLogLine）
  - 定数：UPPER_SNAKE_CASE（例：MAX_RETRIES）
- すべてのpublicメソッドにJavadocコメントを付けること
- コメントは日本語で記載すること
- エラーハンドリングは適切な例外処理を実装すること
- **specification.txtを更新した場合は、必ず冒頭のバージョン情報も更新すること。**

---

## アクション実行システム（ActionEngine）

### `action_tools`（アクション実行ツール管理）
| カラム名         | 型              | 説明                           |
|------------------|------------------|--------------------------------|
| id               | INT              | 主キー、自動採番               |
| tool_name        | VARCHAR(50)      | 操作ツール名（ユニーク）       |
| tool_type        | ENUM             | ツールタイプ（mail, iptables, cloudflare, webhook, custom） |
| is_enabled       | BOOLEAN          | ツール有効化フラグ             |
| config_json      | JSON             | ツール固有設定（JSON形式）     |
| description      | TEXT             | ツールの説明                   |
| created_at       | DATETIME         | 作成日時                       |
| updated_at       | DATETIME         | 最終更新日時                   |

### `action_rules`（アクション実行ルール管理）
| カラム名         | 型              | 説明                           |
|------------------|------------------|--------------------------------|
| id               | INT              | 主キー、自動採番               |
| rule_name        | VARCHAR(100)     | ルール名                       |
| target_server    | VARCHAR(100)     | 対象サーバー名（*=全サーバー） |
| condition_type   | ENUM             | 実行条件タイプ（attack_detected, ip_frequency, status_code, scheduled_report, custom） |
| condition_params | JSON             | 条件パラメータ（JSON形式）     |
| action_tool_id   | INT              | 実行する操作ツールID           |
| action_params    | JSON             | アクション固有パラメータ       |
| is_enabled       | BOOLEAN          | ルール有効化フラグ             |
| priority         | INT              | ルール優先度（数値が小さいほど高優先） |
| last_executed    | DATETIME         | 最終実行日時                   |
| execution_count  | INT              | 実行回数                       |
| created_at       | DATETIME         | 作成日時                       |
| updated_at       | DATETIME         | 最終更新日時                   |

### `action_execution_log`（アクション実行履歴）
| カラム名                | 型              | 説明                           |
|------------------------|------------------|--------------------------------|
| id                     | BIGINT           | 主キー、自動採番               |
| rule_id                | INT              | 実行されたルールID             |
| server_name            | VARCHAR(100)     | アクション実行対象サーバー     |
| trigger_event          | JSON             | トリガーとなったイベント情報   |
| execution_status       | ENUM             | 実行ステータス（success, failed, skipped） |
| execution_result       | TEXT             | 実行結果・エラーメッセージ     |
| execution_time         | DATETIME         | 実行日時                       |
| processing_duration_ms | INT              | 処理時間（ミリ秒）             |

---

## 🚀 アクション実行システム（ActionEngine）

### ✉️ メール通知機能
- **攻撃検知時の自動メール通知**：ModSecurity検知やパターンマッチした攻撃を即座にメール通知
- **定時統計レポート**：日次/週次/月次の統計データを自動でメール送信
- **SMTP設定**：外部設定ファイル（smtp_config.json）またはデフォルト設定を使用
- **接続チェック**：SMTP接続可能性を15秒タイムアウトで確認、5分間キャッシュで効率化
- **テンプレート機能**：メールの件名・本文で変数置換対応（{attack_type}, {ip_address}など）

#### 📧 SMTP設定ファイル仕様
```json
{
  "smtp": {
    "host": "192.168.10.5",
    "port": 25,
    "auth_required": false,
    "username": "",
    "password": "",
    "security": "NONE",
    "timeout": 30,
    "connection_timeout": 15,
    "enable_debug": false
  },
  "defaults": {
    "from_email": "noreply@example.com",
    "from_name": "Edamame Security Analyzer"
  }
}
```

#### 📍 SMTP設定ファイル読み込み順序
1. `container/config/smtp_config.json`（開発環境）
2. `/app/config/smtp_config.json`（Docker環境）
3. `config/smtp_config.json`（相対パス）
4. `smtp_config.json`（カレントディレクトリ）
5. デフォルト設定（上記すべてが見つからない場合）

### 🎯 アクション実行条件
- **attack_detected**：攻撃検知時の即座実行
- **ip_frequency**：IP頻度に基づく実行（未実装）
- **status_code**：HTTPステータスコードに基づく実行（未実装）
- **scheduled_report**：定時レポート送信
- **custom**：カスタム条件（未実装）

### 📊 統計データ収集機能
- **アクセス数統計**：総アクセス数、ステータスコード別集計
- **攻撃統計**：攻撃タイプ別件数、総攻撃数
- **ModSecurity統計**：ブロック数、ルール別統計（TOP10）
- **URL統計**：新規URL発見数
- **サーバー別集計**：複数サーバー対応（*で全サーバー集計）

### 🔧 将来拡張予定のアクション
- **iptables**：攻撃IPの自動ブロック
- **cloudflare**：Cloudflare WAFルール追加
- **webhook**：外部システムへの通知

---

## DB仕様について
- データベース仕様（テーブル・カラム・初期データ・制約等）は `document/db_schema_spec.md` に集約しました。
- DB関��の仕様を変更する場合は、必ず `db_schema_spec.md` を更新してください。
- 旧DB仕様は本ファイルから削除しました。